"""
Django settings for shepherd_web project.

Generated by 'django-admin startproject' using Django 3.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import logging.config
import os
from pathlib import Path

from django.utils.translation import gettext_lazy as _

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("django_secret_key")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG", False)

ALLOWED_HOSTS = ["*"]
AUTH_USER_MODEL = "user.ShepherdUser"

DEFAULT_FROM_EMAIL = os.getenv("DEFAULT_FROM_EMAIL")
DEFAULT_FEEDBACK_EMAIL = os.getenv("DEFAULT_FEEDBACK_EMAIL")
EMAIL_BACKEND = "django_ses.SESBackend"
AWS_ACCESS_KEY_ID = os.getenv("aws_ses_access_key_id")
AWS_SECRET_ACCESS_KEY = os.getenv("aws_ses_secret_access_key")
AWS_SES_ACCESS_KEY_ID = os.getenv("aws_ses_access_key_id")
AWS_SES_SECRET_ACCESS_KEY = os.getenv("aws_ses_secret_access_key")
AWS_LOCATION = "staticfiles"
AWS_DEFAULT_ACL = "public-read"
AWS_STORAGE_BUCKET_NAME = os.getenv("aws_s3_storage_bucket_name")

# Application definition

INSTALLED_APPS = [
    "modeltranslation",
    "debug_toolbar",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.gis",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_extensions",
    "corsheaders",
    "bootstrap4",
    "djstripe",
    "crispy_forms",
    "storages",
    "leaflet",
    "django_fsm_log",
    "fcm_django",
    "timezone_field",
    "mathfilters",
    "subscriptions.apps.SubscriptionsConfig",
    "martor",
    "activity",
    "shepherd_web",
    "plan",
    "user",
    "crop",
    "equipment",
    "farm",
    "field",
    "image",
    "inventory",
    "subscription",
    "task",
    "templatetags",
    "work_order",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    'django.middleware.locale.LocaleMiddleware',
    "django.middleware.common.CommonMiddleware",
    "debug_toolbar.middleware.DebugToolbarMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "shepherd_web.middleware.AuditTrackMiddleware",
    "corsheaders.middleware.CorsMiddleware",
]

CORS_ORIGIN_ALLOW_ALL = True

SESSION_ENGINE = "django.contrib.sessions.backends.signed_cookies"

ROOT_URLCONF = "shepherd_web.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
            "libraries": {
                "app_filters": "templatetags.app_filters",
            },
        },
    },
]

WSGI_APPLICATION = "shepherd_web.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": os.getenv("DATABASE_ENGINE"),
        "NAME": "shepherd",
        "HOST": os.getenv("db_host"),
        "PORT": os.getenv("db_port"),
        "USER": os.getenv("db_username"),
        "PASSWORD": os.getenv("db_password"),
        "OPTIONS": {"options": "-c search_path=shepherd,public"},
    },
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = "en"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True

LANGUAGES = (
    ('en', _('English')),
    ('fr', _('French')),
    ('es', _('Spanish')),
)

MODELTRANSLATION_DEBUG = True
MODELTRANSLATION_DEFAULT_LANGUAGE = 'en'
MODELTRANSLATION_AUTO_POPULATE = 'default'

LOCALE_PATHS = [
    BASE_DIR / 'locale/',
]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = "/staticfiles/"


STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]

CRISPY_TEMPLATE_PACK = "bootstrap5"

# Clear prev config
LOGGING_CONFIG = None

# Get log level from env
LOGLEVEL = os.getenv("DJANGO_LOGLEVEL", "info").upper()

logging.config.dictConfig(
    {
        "version": 1,
        "disable_existing_loggers": False,
        "formatters": {
            "console": {
                "format": "%(asctime)s %(levelname)s [%(name)s:%(lineno)s] %(module)s %(process)d %(thread)d %(message)s",
            },
        },
        "handlers": {
            "console": {
                "class": "logging.StreamHandler",
                "formatter": "console",
            },
        },
        "loggers": {
            "": {
                "level": LOGLEVEL,
                "handlers": [
                    "console",
                ],
            },
        },
    }
)

FCM_DJANGO_SETTINGS = {"FCM_SERVER_KEY": os.getenv("fcm_server_key")}

LOGIN_REDIRECT_URL = "farm_dashboard"
LOGOUT_REDIRECT_URL = "main_page"

STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
STATICFILES_STORAGE = "storages.backends.s3boto3.S3StaticStorage"
DEFAULT_FILE_STORAGE = "shepherd_web.storage_backends.PublicFileStorage"
BACKGROUND_IMAGE_FILE_STORAGE = "shepherd_web.storage_backends.BackgroundImageStorage"
LOCATION_IMAGE_FILE_STORAGE = "shepherd_web.storage_backends.LocationImageStorage"

GOOGLE_MAPS_API_KEY = os.getenv("google_maps_api_key")

MARTOR_ENABLE_CONFIGS = {
    'emojis': 'true',
    'living': 'true',
    'spellcheck': 'true',
}

MARTOR_TOOLBAR_BUTTONS = [
    'bold', 'italic', 'horizontal', 'heading', 'pre-code',
    'blockquote', 'unordered-list', 'ordered-list',
    'link', 'image-link', 'emoji',
    'direct-mention', 'toggle-maximize', 'help'
]

CSRF_COOKIE_HTTPONLY = False

INTERNAL_IPS = [
    "127.0.0.1",
    "*",
]

PRIMARY_DOMAIN = os.getenv("PRIMARY_DOMAIN")

# Stripe settings
STRIPE_LIVE_MODE = os.getenv("STRIPE_LIVE_MODE")
DJSTRIPE_USE_NATIVE_JSONFIELD = os.getenv("DJSTRIPE_USE_NATIVE_JSONFIELD")
DJSTRIPE_FOREIGN_KEY_TO_FIELD = os.getenv("DJSTRIPE_FOREIGN_KEY_TO_FIELD")
DJSTRIPE_WEBHOOK_SECRET = os.getenv("DJSTRIPE_WEBHOOK_SECRET")
STRIPE_TEST_SECRET_KEY = os.getenv("STRIPE_TEST_SECRET_KEY")
STRIPE_TEST_PUBLIC_KEY = os.getenv("STRIPE_TEST_PUBLIC_KEY")
STRIPE_LIVE_SECRET_KEY = os.getenv("STRIPE_LIVE_SECRET_KEY")
STRIPE_LIVE_PUBLIC_KEY = os.getenv("STRIPE_LIVE_PUBLIC_KEY")


if STRIPE_LIVE_MODE is True:
    STRIPE_PUBLIC_KEY = STRIPE_LIVE_PUBLIC_KEY
    STRIPE_SECRET_KEY = STRIPE_LIVE_SECRET_KEY
else:
    STRIPE_PUBLIC_KEY = STRIPE_TEST_PUBLIC_KEY
    STRIPE_SECRET_KEY = STRIPE_TEST_SECRET_KEY